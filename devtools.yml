---
- name: Install development tools on Fedora Workstation
  hosts: localhost
  connection: local
  gather_facts: true

  vars:
    kubectl_version: "v1.31.1"
    k9s_version: "v0.32.5"
    stern_version: "v1.30.0"
    jira_cli_version: "v1.5.1"
    kubectx_version: "v0.9.5"
    yq_version: "v4.44.3"
    sops_version: "v3.9.0"

    bin_dir: "{{ lookup('env','HOME') }}/.local/bin"
    
  tasks:
    - name: Ensure ~/.local/bin exists
      file:
        path: "{{ bin_dir }}"
        state: directory
        mode: "0755"

    - name: Install Python development packages in pymadix environment
      pip:
        name:
          - black
          - flake8
          - pylint
          - autopep8
        state: present
        executable: "{{ lookup('env','HOME') }}/.pyenv/versions/3.12.7/envs/pymadix/bin/pip"

    - name: Ensure dnf-plugins-core is installed
      dnf:
        name: dnf-plugins-core
        state: present
      become: true

    - name: Configure passwordless sudo for user
      copy:
        dest: "/etc/sudoers.d/{{ ansible_user_id }}-nopasswd"
        content: |
          # Allow {{ ansible_user_id }} to run all commands without password
          {{ ansible_user_id }} ALL=(ALL) NOPASSWD: ALL
        mode: "0440"
        owner: root
        group: root
        validate: 'visudo -cf %s'
      become: true

    - name: Check if Microsoft GPG key is already imported
      shell: rpm -q gpg-pubkey --qf '%{SUMMARY}\n' | grep -i microsoft
      register: microsoft_key_check
      failed_when: false
      changed_when: false

    - name: Import Microsoft VS Code repository key
      rpm_key:
        key: https://packages.microsoft.com/keys/microsoft.asc
        state: present
      become: true
      when: microsoft_key_check.rc != 0

    - name: Add VS Code repository file
      copy:
        dest: /etc/yum.repos.d/vscode.repo
        content: |
          [code]
          name=Visual Studio Code
          baseurl=https://packages.microsoft.com/yumrepos/vscode
          enabled=1
          gpgcheck=1
          gpgkey=https://packages.microsoft.com/keys/microsoft.asc
        mode: "0644"
        force: false
      become: true

    - name: Install Visual Studio Code
      dnf:
        name: code
        state: present
        update_cache: true
      become: true

    - name: Install Fira Code font
      dnf:
        name: fira-code-fonts
        state: present
      become: true

    - name: Ensure VS Code user configuration directory exists
      file:
        path: "{{ lookup('env','HOME') }}/.config/Code/User"
        state: directory
        mode: "0755"

    - name: Check if Google GPG key is already imported
      shell: rpm -q gpg-pubkey --qf '%{SUMMARY}\n' | grep -i google
      register: google_key_check
      failed_when: false
      changed_when: false

    - name: Import Google Chrome repository key
      rpm_key:
        key: https://dl.google.com/linux/linux_signing_key.pub
        state: present
      become: true
      when: google_key_check.rc != 0

    - name: Add Google Chrome repository file
      copy:
        dest: /etc/yum.repos.d/google-chrome.repo
        content: |
          [google-chrome]
          name=google-chrome
          baseurl=http://dl.google.com/linux/chrome/rpm/stable/x86_64
          enabled=1
          gpgcheck=1
          gpgkey=https://dl.google.com/linux/linux_signing_key.pub
        mode: "0644"
        force: false
      become: true

    - name: Install Google Chrome
      dnf:
        name: google-chrome-stable
        state: present
        update_cache: true
      become: true

    - name: Check if Tailscale GPG key is already imported
      shell: rpm -q gpg-pubkey --qf '%{SUMMARY}\n' | grep -i tailscale
      register: tailscale_key_check
      failed_when: false
      changed_when: false

    - name: Import Tailscale repository key
      rpm_key:
        key: https://pkgs.tailscale.com/stable/fedora/repo.gpg
        state: present
      become: true
      when: tailscale_key_check.rc != 0

    - name: Add Tailscale repository file
      copy:
        dest: /etc/yum.repos.d/tailscale.repo
        content: |
          [tailscale-stable]
          name=Tailscale stable
          baseurl=https://pkgs.tailscale.com/stable/fedora/$basearch
          enabled=1
          type=rpm
          repo_gpgcheck=1
          gpgcheck=0
          gpgkey=https://pkgs.tailscale.com/stable/fedora/repo.gpg
        mode: "0644"
        force: false
      become: true

    - name: Install Tailscale
      dnf:
        name: tailscale
        state: present
        update_cache: true
      become: true

    - name: Enable and start Tailscale service
      systemd:
        name: tailscaled
        enabled: true
        state: started
      become: true

    - name: Add Flathub repository
      flatpak_remote:
        name: flathub
        state: present
        flatpakrepo_url: https://flathub.org/repo/flathub.flatpakrepo
        method: user

    - name: Install Slack via Flatpak
      flatpak:
        name: com.slack.Slack
        state: present
        method: user
    
    - name: Install kubectl
      shell: |
        set -e
        mkdir -p {{ bin_dir }}
        curl -fsSL -o {{ bin_dir }}/kubectl https://dl.k8s.io/release/{{ kubectl_version }}/bin/linux/amd64/kubectl
        chmod +x {{ bin_dir }}/kubectl
      args:
        creates: "{{ bin_dir }}/kubectl"

    - name: Install kubectx
      shell: |
        set -e
        mkdir -p {{ bin_dir }}
        curl -fsSL -o {{ bin_dir }}/kubectx https://github.com/ahmetb/kubectx/releases/download/{{ kubectx_version }}/kubectx
        chmod +x {{ bin_dir }}/kubectx
      args:
        creates: "{{ bin_dir }}/kubectx"

    - name: Install kubens
      shell: |
        set -e
        mkdir -p {{ bin_dir }}
        curl -fsSL -o {{ bin_dir }}/kubens https://github.com/ahmetb/kubectx/releases/download/{{ kubectx_version }}/kubens
        chmod +x {{ bin_dir }}/kubens
      args:
        creates: "{{ bin_dir }}/kubens"

    - name: Install Krew (kubectl plugin manager)
      shell: |
        set -x
        cd "$(mktemp -d)"
        OS="$(uname | tr '[:upper:]' '[:lower:]')"
        ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')"
        KREW="krew-${OS}_${ARCH}"
        curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz"
        tar zxvf "${KREW}.tar.gz"
        ./"${KREW}" install krew
      tags: krew

    - name: Update Krew and install kubectl plugins
      shell: |
        export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
        kubectl krew update
        kubectl krew install oidc-login konfig
      args:
        creates: "{{ lookup('env','HOME') }}/.krew/receipts/oidc-login.yaml"
      tags: krew

    - name: Create ~/.kube/configs directory for kubeconfig files
      file:
        path: "{{ lookup('env','HOME') }}/.kube/configs"
        state: directory
        mode: "0755"
      tags: kube

    - name: Install k9s
      shell: |
        set -e
        mkdir -p {{ bin_dir }}
        curl -fsSL -o /tmp/k9s.tgz https://github.com/derailed/k9s/releases/download/{{ k9s_version }}/k9s_Linux_amd64.tar.gz
        tar -xzf /tmp/k9s.tgz -C /tmp
        install -m 0755 /tmp/k9s {{ bin_dir }}/k9s
        rm -f /tmp/k9s /tmp/k9s.tgz
      args:
        creates: "{{ bin_dir }}/k9s"

    - name: Install stern
      shell: |
        set -e
        mkdir -p {{ bin_dir }}
        curl -fsSL -o /tmp/stern.tgz https://github.com/stern/stern/releases/download/{{ stern_version }}/stern_{{ stern_version | regex_replace('^v','') }}_linux_amd64.tar.gz
        tar -xzf /tmp/stern.tgz -C /tmp stern
        install -m 0755 /tmp/stern {{ bin_dir }}/stern
        rm -f /tmp/stern /tmp/stern.tgz
      args:
        creates: "{{ bin_dir }}/stern"

    - name: Install AWS CLI v2
      shell: |
        set -e
        tmpdir=$(mktemp -d)
        curl -fsSL -o $tmpdir/awscliv2.zip https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        unzip -q $tmpdir/awscliv2.zip -d $tmpdir
        $tmpdir/aws/install --bin-dir {{ bin_dir }} --install-dir $HOME/.local/aws-cli --update
        rm -rf $tmpdir
      args:
        creates: "{{ bin_dir }}/aws"

    - name: Install jira-cli
      shell: |
        set -e
        mkdir -p {{ bin_dir }}
        tmpdir=$(mktemp -d)
        curl -fsSL -o $tmpdir/jira.tar.gz https://github.com/ankitpokhrel/jira-cli/releases/download/{{ jira_cli_version }}/jira_{{ jira_cli_version | regex_replace('^v','') }}_linux_x86_64.tar.gz
        tar -xzf $tmpdir/jira.tar.gz -C $tmpdir
        find $tmpdir -name "jira" -type f -executable -exec install -m 0755 {} {{ bin_dir }}/jira \;
        rm -rf $tmpdir
      args:
        creates: "{{ bin_dir }}/jira"

    - name: Install yq
      shell: |
        set -e
        mkdir -p {{ bin_dir }}
        curl -fsSL -o {{ bin_dir }}/yq https://github.com/mikefarah/yq/releases/download/{{ yq_version }}/yq_linux_amd64
        chmod +x {{ bin_dir }}/yq
      args:
        creates: "{{ bin_dir }}/yq"

    - name: Install sops
      shell: |
        set -e
        mkdir -p {{ bin_dir }}
        curl -fsSL -o {{ bin_dir }}/sops https://github.com/getsops/sops/releases/download/{{ sops_version }}/sops-{{ sops_version }}.linux.amd64
        chmod +x {{ bin_dir }}/sops
      args:
        creates: "{{ bin_dir }}/sops"

    - name: Install Oh-My-Zsh
      shell: |
        set -e
        export RUNZSH=no CHSH=no KEEP_ZSHRC=yes
        if [ ! -d $HOME/.oh-my-zsh ]; then
          sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
        fi
      args:
        creates: "{{ lookup('env','HOME') }}/.oh-my-zsh"

    - name: Install zsh-autosuggestions plugin
      git:
        repo: https://github.com/zsh-users/zsh-autosuggestions
        dest: "{{ lookup('env','HOME') }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
        depth: 1

    - name: Install zsh-syntax-highlighting plugin
      git:
        repo: https://github.com/zsh-users/zsh-syntax-highlighting
        dest: "{{ lookup('env','HOME') }}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
        depth: 1

    - name: Setup fzf
      shell: |
        set -e
        if [ ! -d ~/.fzf ]; then
          git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
          ~/.fzf/install --all --no-update-rc
        fi
      args:
        creates: "{{ lookup('env','HOME') }}/.fzf"

    - name: Install Powerlevel10k theme
      git:
        repo: https://github.com/romkatv/powerlevel10k.git
        dest: "{{ lookup('env','HOME') }}/.oh-my-zsh/custom/themes/powerlevel10k"
        depth: 1

    - name: Sync ~/.zshrc configuration (only if different)
      synchronize:
        src: ".zshrc"
        dest: "{{ lookup('env', 'HOME') }}/.zshrc"
        checksum: yes
        times: no
      delegate_to: localhost
      tags: zsh

    - name: Sync ~/.p10k.zsh configuration (only if different)
      synchronize:
        src: ".p10k.zsh"
        dest: "{{ lookup('env', 'HOME') }}/.p10k.zsh"
        checksum: yes
        times: no
      delegate_to: localhost
      tags: zsh

    - name: Add zsh auto-start comment to .bashrc
      lineinfile:
        path: "{{ lookup('env','HOME') }}/.bashrc"
        line: "# Auto-start zsh if available and interactive"
        create: yes
      tags: zsh

    - name: Add zsh exec to .bashrc
      lineinfile:
        path: "{{ lookup('env','HOME') }}/.bashrc"
        line: '[[ $- == *i* ]] && command -v zsh >/dev/null 2>&1 && [[ "$SHELL" != *"zsh"* ]] && exec zsh'
        create: yes
      tags: zsh

    - name: Add Krew to PATH in .zshrc
      lineinfile:
        path: "{{ lookup('env','HOME') }}/.zshrc"
        line: 'export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"'
        create: yes
      tags: zsh-setup

    - name: Summary
      debug:
        msg:
          - "✓ Installed development tools into ~/.local/bin"
          - "✓ Configured zsh with Oh-My-Zsh and Powerlevel10k"
          - "✓ All tools ready: kubectl, k9s, stern, aws, jira, yq, sops"
          - "✓ Kubernetes tools: kubectl, kubectx, kubens, k9s, stern, krew"
          - "✓ Container tools: podman, buildah, skopeo"
          - "✓ Desktop applications: VS Code, Chrome, Slack"
          - "✓ Network: Tailscale client installed and service enabled"
          - "NOTE: Run 'sudo tailscale up' to connect to your tailnet"
          - "NOTE: Add ~/.krew/bin to your PATH for krew plugins"
          - "NOTE: Run pyenv-setup.yml to install Python environment"
