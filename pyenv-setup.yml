---
- name: Setup pyenv and Python environment
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    base_packages:
      - git
      - fzf
      - curl
      - unzip
      - tar
      - jq
      - ripgrep
      - procps-ng
      - powerline
      - powerline-fonts
      - podman
      - buildah
      - skopeo
      - gh
      - vim
      - python3
      - python3-pip
      - make
      - gcc
      - zlib-devel
      - bzip2
      - bzip2-devel
      - readline-devel
      - sqlite
      - sqlite-devel
      - openssl-devel
      - tk-devel
      - libffi-devel
      - xz-devel
      - alacritty
      - wmctrl
      - xdpyinfo
      - xprop
      - xwininfo
      - xdotool
      - xrandr

  tasks:
    - name: Install base development packages via DNF
      dnf:
        name: "{{ base_packages }}"
        state: present
      become: true

    - name: Check if pyenv is already installed
      stat:
        path: "{{ lookup('env','HOME') }}/.pyenv"
      register: pyenv_exists

    - name: Install pyenv
      shell: curl https://pyenv.run | bash
      when: not pyenv_exists.stat.exists

    - name: Add pyenv to PATH and initialize in ~/.zshrc
      lineinfile:
        path: "{{ lookup('env','HOME') }}/.zshrc"
        line: "{{ item }}"
        create: yes
      loop:
        - 'export PYENV_ROOT="$HOME/.pyenv"'
        - 'export PATH="$PYENV_ROOT/bin:$PATH"'
        - 'eval "$(pyenv init -)"'

    - name: Check if Python 3.12 is installed via pyenv
      shell: "{{ lookup('env','HOME') }}/.pyenv/bin/pyenv versions | grep -q '3.12.7'"
      register: python_312_check
      failed_when: false
      changed_when: false

    - name: Install Python 3.12.7 via pyenv
      shell: "{{ lookup('env','HOME') }}/.pyenv/bin/pyenv install 3.12.7"
      when: python_312_check.rc != 0

    - name: Set Python 3.12.7 as global default
      shell: "{{ lookup('env','HOME') }}/.pyenv/bin/pyenv global 3.12.7"
      when: python_312_check.rc != 0

    - name: Check if pyenv virtualenv pymadix exists
      shell: "{{ lookup('env','HOME') }}/.pyenv/bin/pyenv versions | grep -q '3.12.7/envs/pymadix'"
      register: pymadix_check
      failed_when: false
      changed_when: false

    - name: Create pyenv virtual environment pymadix
      shell: |
        export PYENV_ROOT="{{ lookup('env','HOME') }}/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)"
        pyenv virtualenv 3.12.7 pymadix
      when: pymadix_check.rc != 0

    - name: Deactivate default virtual environment if active
      shell: |
        export PYENV_ROOT="{{ lookup('env','HOME') }}/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)"
        pyenv deactivate 2>/dev/null || true
      args:
        executable: /bin/bash
      ignore_errors: yes
      changed_when: false

    - name: Upgrade pip in pymadix environment
      pip:
        name: pip>=24.2
        state: present
        executable: "{{ lookup('env','HOME') }}/.pyenv/versions/3.12.7/envs/pymadix/bin/pip"
      tags: ansible

    - name: Install Ansible and related tools in pymadix environment
      pip:
        name:
          - ansible==12.1.0
          - ansible-core>=2.16.11
          - ansible-compat>=25.8.2
          - ansible-lint==25.9.2
        state: present
        executable: "{{ lookup('env','HOME') }}/.pyenv/versions/3.12.7/envs/pymadix/bin/pip"
      tags: ansible

    - name: Check if community.general collection is installed
      shell: |
        export PYENV_ROOT="{{ lookup('env','HOME') }}/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)"
        pyenv activate pymadix
        ansible-galaxy collection list | grep -q 'community.general'
      args:
        executable: /bin/bash
      register: community_general_check
      failed_when: false
      changed_when: false
      tags: ansible

    - name: Install community.general Ansible collection
      shell: |
        export PYENV_ROOT="{{ lookup('env','HOME') }}/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)"
        pyenv activate pymadix
        ansible-galaxy collection install community.general
      args:
        executable: /bin/bash
      when: community_general_check.rc != 0
      tags: ansible

    - name: Ensure Alacritty config directory exists
      file:
        path: "{{ lookup('env','HOME') }}/.config/alacritty"
        state: directory
        mode: "0755"

    - name: Create Alacritty configuration file
      copy:
        dest: "{{ lookup('env','HOME') }}/.config/alacritty/alacritty.toml"
        content: |
          # Alacritty Configuration
          
          [window]
          # Window dimensions (changes require restart)
          dimensions = { columns = 120, lines = 30 }
          
          # Window position (changes require restart)
          # position = { x = 0, y = 0 }
          
          # Window padding (changes require restart)
          padding = { x = 8, y = 8 }
          
          # Allow terminal applications to change Alacritty's window title.
          dynamic_title = true
          
          # Window decorations
          decorations = "full"
          
          # Background opacity
          opacity = 0.95
          
          # Startup Mode (changes require restart)
          startup_mode = "Windowed"
          
          [scrolling]
          # Maximum number of lines in the scrollback buffer.
          history = 10000
          
          # Scrolling distance multiplier.
          multiplier = 3
          
          [font]
          # Normal (roman) font face
          normal = { family = "Fira Code", style = "Regular" }
          
          # Bold font face
          bold = { family = "Fira Code", style = "Bold" }
          
          # Italic font face
          italic = { family = "Fira Code", style = "Italic" }
          
          # Bold italic font face
          bold_italic = { family = "Fira Code", style = "Bold Italic" }
          
          # Point size
          size = 12.0
          
          [colors]
          # Default colors
          [colors.primary]
          background = "#1e2030"
          foreground = "#e0def4"
          dim_foreground = "#908caa"
          
          # Cursor colors
          [colors.cursor]
          text = "#e0def4"
          cursor = "#56526e"
          
          # Vi mode cursor colors
          [colors.vi_mode_cursor]
          text = "#e0def4"
          cursor = "#c4a7e7"
          
          # Search colors
          [colors.search.matches]
          foreground = "#1e2030"
          background = "#c4a7e7"
          
          [colors.search.focused_match]
          foreground = "#1e2030"
          background = "#f6c177"
          
          # Selection colors
          [colors.selection]
          text = "#e0def4"
          background = "#403d52"
          
          # Normal colors
          [colors.normal]
          black = "#26233a"
          red = "#eb6f92"
          green = "#31748f"
          yellow = "#f6c177"
          blue = "#9ccfd8"
          magenta = "#c4a7e7"
          cyan = "#ebbcba"
          white = "#e0def4"
          
          # Bright colors
          [colors.bright]
          black = "#6e6a86"
          red = "#eb6f92"
          green = "#31748f"
          yellow = "#f6c177"
          blue = "#9ccfd8"
          magenta = "#c4a7e7"
          cyan = "#ebbcba"
          white = "#e0def4"
          
          # Dim colors
          [colors.dim]
          black = "#191724"
          red = "#eb6f92"
          green = "#31748f"
          yellow = "#f6c177"
          blue = "#9ccfd8"
          magenta = "#c4a7e7"
          cyan = "#ebbcba"
          white = "#e0def4"
          
          [bell]
          # Visual Bell Animation
          animation = "EaseOutExpo"
          
          # Duration of the visual bell flash in milliseconds.
          duration = 0
          
          # Visual bell animation color.
          color = "#ffffff"
          
          [cursor]
          # Cursor style
          style = { shape = "Block", blinking = "Off" }
          
          # Vi mode cursor style
          vi_mode_style = "None"
          
          # Cursor blinking interval in milliseconds.
          blink_interval = 750
          
          # Time after which cursor stops blinking, in seconds.
          blink_timeout = 5
          
          # If this is `true`, the cursor will be rendered as a hollow box when the
          # window is not focused.
          unfocused_hollow = true
          
          # Thickness of the cursor relative to the cell width as floating point number
          # from `0.0` to `1.0`.
          thickness = 0.15
          
          [terminal]
          # Controls the OSC 52 behavior for clipboard interactions.
          osc52 = "CopyPaste"
          
          [mouse]
          # If this is `true`, the cursor is temporarily hidden when typing.
          hide_when_typing = true
          
          [[mouse.bindings]]
          mouse = "Middle"
          action = "PasteSelection"
          
          [hints]
          # Terminal hints can be used to find text or hyperlink in the visible part of the terminal
          # and pipe it to other applications.
          [[hints.enabled]]
          # Regex used to locate hints
          regex = "(ipfs:|ipns:|magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)[^\u0000-\u001f\u007f-\u009f<>\"\\s{-}\\^⟨⟩`]+"
          
          # Action to execute when the hint is clicked
          command = "xdg-open"
          
          # Post processing for hints
          post_processing = true
          
          # Mouse bindings for hints
          [hints.enabled.binding]
          key = "U"
          mods = "Control|Shift"
          
          [keyboard]
          # Key bindings
          bindings = [
            { key = "V", mods = "Control|Shift", action = "Paste" },
            { key = "C", mods = "Control|Shift", action = "Copy" },
            { key = "Insert", mods = "Shift", action = "Paste" },
            { key = "Insert", mods = "Control", action = "Copy" },
            { key = "V", mods = "Control", action = "Paste" },
            { key = "Key0", mods = "Control", action = "ResetFontSize" },
            { key = "Equals", mods = "Control", action = "IncreaseFontSize" },
            { key = "Plus", mods = "Control", action = "IncreaseFontSize" },
            { key = "NumpadAdd", mods = "Control", action = "IncreaseFontSize" },
            { key = "Minus", mods = "Control", action = "DecreaseFontSize" },
            { key = "NumpadSubtract", mods = "Control", action = "DecreaseFontSize" },
            { key = "Return", mods = "Alt", action = "ToggleFullscreen" },
            { key = "N", mods = "Control|Shift", action = "SpawnNewInstance" },
          ]
        mode: "0644"
        force: true
      tags: shell

    - name: Install Fira Code font for Alacritty
      dnf:
        name: fira-code-fonts
        state: present
      become: true

    - name: Create desktop entry for quake-style Alacritty
      copy:
        dest: "{{ lookup('env','HOME') }}/.local/share/applications/alacritty-quake.desktop"
        content: |
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name=Alacritty Quake
          Comment=A fast, cross-platform, OpenGL terminal emulator (Quake mode)
          Icon=Alacritty
          Exec=alacritty --class=AlacrittyQuake
          NoDisplay=true
          Terminal=false
          Categories=System;TerminalEmulator;
          StartupWMClass=AlacrittyQuake
        mode: "0644"

    - name: Create GNOME Shell extension script for quake-style dropdown
      copy:
        dest: "{{ lookup('env','HOME') }}/.local/bin/alacritty-quake"
        content: |
          #!/bin/bash
          # Quake-style dropdown terminal toggle script
          
          WINDOW_CLASS="AlacrittyQuake"
          
          # Check if quake terminal is already running
          if wmctrl -lx | grep -q "$WINDOW_CLASS"; then
              # Get the window ID
              WINDOW_ID=$(wmctrl -lx | grep "$WINDOW_CLASS" | awk '{print $1}')
              
              # Check if window is visible (not minimized)
              if xwininfo -id "$WINDOW_ID" | grep -q "IsViewable"; then
                  # Hide the window
                  wmctrl -i -r "$WINDOW_ID" -b add,hidden
              else
                  # Show and focus the window
                  wmctrl -i -r "$WINDOW_ID" -b remove,hidden
                  wmctrl -i -a "$WINDOW_ID"
              fi
          else
              # Start new quake terminal
              alacritty --class="$WINDOW_CLASS" --title="Quake Terminal" &
              
              # Wait a moment for window to appear, then position it
              sleep 0.5
              
              # Get screen dimensions
              SCREEN_WIDTH=$(xdpyinfo | awk '/dimensions:/ { print $2 }' | cut -d'x' -f1)
              SCREEN_HEIGHT=$(xdpyinfo | awk '/dimensions:/ { print $2 }' | cut -d'x' -f2)
              
              # Calculate window dimensions (80% width, 50% height)
              WINDOW_WIDTH=$((SCREEN_WIDTH * 80 / 100))
              WINDOW_HEIGHT=$((SCREEN_HEIGHT * 50 / 100))
              
              # Calculate position (centered horizontally, at top)
              WINDOW_X=$(((SCREEN_WIDTH - WINDOW_WIDTH) / 2))
              WINDOW_Y=0
              
              # Position and resize the window
              wmctrl -r "$WINDOW_CLASS" -e 0,$WINDOW_X,$WINDOW_Y,$WINDOW_WIDTH,$WINDOW_HEIGHT
              wmctrl -r "$WINDOW_CLASS" -b add,above
          fi
        mode: "0755"

    - name: Summary
      debug:
        msg:
          - "✓ Installed pyenv"
          - "✓ Installed Python 3.12.7 via pyenv"
          - "✓ Created pymadix virtual environment"
          - "✓ Installed Ansible and community.general collection"
          - "✓ Configured Alacritty terminal with Rose Pine theme"
          - "✓ Created quake-style dropdown terminal script"
          - ""
          - "⚠️  IMPORTANT: Run the following command to activate the environment:"
          - "    pyenv activate pymadix"
          - ""
          - "⚠️  IMPORTANT: To enable quake-style terminal (F12 key):"
          - "    Set keyboard shortcut in GNOME Settings:"
          - "       Settings > Keyboard > Custom Shortcuts"
          - "       Command: ~/.local/bin/alacritty-quake"
          - "       Shortcut: F12 (or your preferred key)"
          - ""
          - "✓ Ready to install packages with pip in pymadix environment"

